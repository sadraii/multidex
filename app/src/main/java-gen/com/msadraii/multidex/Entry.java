package com.msadraii.multidex;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.HashMap;
// KEEP INCLUDES END
/**
 * Entity mapped to table ENTRY.
 */
public class Entry {

    private Long id;
    private java.util.Date date;
    private String segments;
    private Long colorCodeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EntryDao myDao;

    private ColorCode colorCode;
    private Long colorCode__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    private HashMap<Integer, Integer> entrySegments = new HashMap<>();
    // KEEP FIELDS END

    public Entry() {
    }

    public Entry(Long id) {
        this.id = id;
    }

    public Entry(Long id, java.util.Date date, String segments, Long colorCodeId) {
        this.id = id;
        this.date = date;
        this.segments = segments;
        this.colorCodeId = colorCodeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEntryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getSegments() {
        return segments;
    }

    public void setSegments(String segments) {
        this.segments = segments;
    }

    public Long getColorCodeId() {
        return colorCodeId;
    }

    public void setColorCodeId(Long colorCodeId) {
        this.colorCodeId = colorCodeId;
    }

    /** To-one relationship, resolved on first access. */
    public ColorCode getColorCode() {
        Long __key = this.colorCodeId;
        if (colorCode__resolvedKey == null || !colorCode__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ColorCodeDao targetDao = daoSession.getColorCodeDao();
            ColorCode colorCodeNew = targetDao.load(__key);
            synchronized (this) {
                colorCode = colorCodeNew;
            	colorCode__resolvedKey = __key;
            }
        }
        return colorCode;
    }

    public void setColorCode(ColorCode colorCode) {
        synchronized (this) {
            this.colorCode = colorCode;
            colorCodeId = colorCode == null ? null : colorCode.getId();
            colorCode__resolvedKey = colorCodeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public HashMap<Integer, Integer> getEntrySegments() {
        return entrySegments;
    }
    // KEEP METHODS END

}
