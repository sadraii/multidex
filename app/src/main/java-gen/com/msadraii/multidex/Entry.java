package com.msadraii.multidex;

import com.msadraii.multidex.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ENTRY.
 */
public class Entry {

    private Long id;
    private java.util.Date date;
    private String segments;
    private Long labelId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EntryDao myDao;

    private Label label;
    private Long label__resolvedKey;


    public Entry() {
    }

    public Entry(Long id) {
        this.id = id;
    }

    public Entry(Long id, java.util.Date date, String segments, Long labelId) {
        this.id = id;
        this.date = date;
        this.segments = segments;
        this.labelId = labelId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEntryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getSegments() {
        return segments;
    }

    public void setSegments(String segments) {
        this.segments = segments;
    }

    public Long getLabelId() {
        return labelId;
    }

    public void setLabelId(Long labelId) {
        this.labelId = labelId;
    }

    /** To-one relationship, resolved on first access. */
    public Label getLabel() {
        Long __key = this.labelId;
        if (label__resolvedKey == null || !label__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelDao targetDao = daoSession.getLabelDao();
            Label labelNew = targetDao.load(__key);
            synchronized (this) {
                label = labelNew;
            	label__resolvedKey = __key;
            }
        }
        return label;
    }

    public void setLabel(Label label) {
        synchronized (this) {
            this.label = label;
            labelId = label == null ? null : label.getId();
            label__resolvedKey = labelId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
